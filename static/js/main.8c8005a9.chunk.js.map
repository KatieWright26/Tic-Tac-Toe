{"version":3,"sources":["components/Board.js","components/Scoreboard.js","components/GameResetButton.js","components/WinnerAlert.js","lib/winningMoves.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Board","board","handleClick","className","map","cell","idx","key","onClick","Scoreboard","xWins","yWins","GameResetButton","handleResetClick","WinnerAlert","winner","POSSIBLE_WINS","Game","useState","Array","fill","setBoard","setWinner","playerOScore","setPlayerOScore","playerXScore","setPlayerXScore","winnerMessage","setWinnerMessage","currentPlayer","setCurrentPlayer","useEffect","filter","w","every","prevState","boardIsFull","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAEaA,EAAQ,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,YAC7B,OACE,yBAAKC,UAAU,SACb,4BACGF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,EAAKE,QAAS,kBAAMN,EAAYI,KACtCD,SCNAI,EAAa,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAClC,OACE,2BAAOR,UAAU,cACf,0CACA,yCAAgBO,GAChB,yCAAgBC,KCLTC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,iBAAH,OAC7B,4BAAQL,QAASK,GAAjB,gBCAWC,EAAc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQF,EAAuB,EAAvBA,iBACpC,OACE,yBAAKV,UAAU,gBACZY,EACD,kBAAC,EAAD,CAAiBF,iBAAkBA,MCP5BG,EAAgB,CAC3B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,ICiEMC,MAnEf,WAAiB,IAAD,EACYC,mBAAS,IAAIC,MAAM,GAAGC,KAAK,KADvC,mBACPnB,EADO,KACAoB,EADA,OAEcH,mBAAS,IAFvB,mBAEPH,EAFO,KAECO,EAFD,OAG0BJ,mBAAS,GAHnC,mBAGPK,EAHO,KAGOC,EAHP,OAI0BN,mBAAS,GAJnC,mBAIPO,EAJO,KAIOC,EAJP,OAK4BR,mBAAS,IALrC,mBAKPS,EALO,KAKQC,EALR,OAM4BV,oBAAS,GANrC,mBAMPW,EANO,KAMQC,EANR,KASdC,qBAAU,WACRf,EAAcgB,QAAO,SAAAC,GASnB,OARIA,EAAEC,OAAM,SAAA5B,GAAG,MAAmB,MAAfL,EAAMK,QACvBgB,EAAU,KACVI,GAAgB,SAAAS,GAAS,OAAIA,EAAY,MAEvCF,EAAEC,OAAM,SAAA5B,GAAG,MAAmB,MAAfL,EAAMK,QACvBgB,EAAU,KACVE,GAAgB,SAAAW,GAAS,OAAIA,EAAY,MAEpClC,OAER,CAACA,IAEJ,IAAMmC,EAAcnC,EAAMiC,OAAM,SAAA7B,GAAI,OAAoB,IAAhBA,EAAKgC,UA4B7C,OA1BAN,qBAAU,WACJK,GAAaR,EAAiB,WACjC,CAACQ,IAGJL,qBAAU,WACJhB,EAAOsB,OAAS,GAAGT,EAAiB,UAAD,OAAWb,EAAX,cACtC,CAACA,IAoBF,yBAAKZ,UAAU,aACZwB,GACC,kBAAC,EAAD,CACEZ,OAAQY,EACRd,iBAtBiB,WACvBS,EAAU,IACVM,EAAiB,IACjBE,GAAkBD,GAClBR,EAAS,IAAIF,MAAM,GAAGC,KAAK,QAqBzB,yBAAKjB,UAAU,kBACb,kBAAC,EAAD,CAAYO,MAAOe,EAAcd,MAAOY,IACxC,kBAAC,EAAD,CAAOtB,MAAOA,EAAOC,YApBP,SAACI,GACA,KAAfL,EAAMK,KACRL,EAAMK,GAAOuB,EAAgB,IAAM,IACnCR,EAAS,YACJpB,IAEL6B,GAAkBD,UCxCTS,MATf,WACE,OACE,yBAAKnC,UAAU,OACb,2CACA,kBAAC,EAAD,QCIcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8c8005a9.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Board = ({ board, handleClick })  => {\n  return (\n    <div className=\"board\">\n      <ul>\n        {board.map((cell, idx) => (\n          <li key={idx} onClick={() => handleClick(idx)}>\n            {cell}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport const Scoreboard = ({ xWins, yWins}) => {\n  return (\n    <aside className=\"scoreboard\">\n      <h2>ScoreBoard</h2>\n      <h3>Player X: { xWins }</h3>\n      <h3>Player O: { yWins }</h3>\n    </aside>\n  );\n}","import React from 'react';\n\nexport const GameResetButton = ({ handleResetClick }) => (\n  <button onClick={handleResetClick}>Reset Game!</button>\n);\n","import React from 'react';\nimport { GameResetButton } from './GameResetButton';\n\nexport const WinnerAlert = ({ winner, handleResetClick }) => {\n  return (\n    <div className=\"winner_alert\">\n      {winner}\n      <GameResetButton handleResetClick={handleResetClick} />\n    </div>\n  );\n}","export const POSSIBLE_WINS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n];\n","import React, { useState, useEffect } from 'react';\nimport { Board } from './Board';\nimport { Scoreboard } from './Scoreboard';\nimport { WinnerAlert } from './WinnerAlert';\nimport { POSSIBLE_WINS } from '../lib/winningMoves';\n\nfunction Game() {\n  const [board, setBoard] = useState(new Array(9).fill(''));\n  const [winner, setWinner] = useState('');\n  const [playerOScore, setPlayerOScore] = useState(0);\n  const [playerXScore, setPlayerXScore] = useState(0);\n  const [winnerMessage, setWinnerMessage] = useState('');\n  const [currentPlayer, setCurrentPlayer] = useState(true);\n\n  // DETECT WINNER\n  useEffect(() => {\n    POSSIBLE_WINS.filter(w => {\n      if (w.every(idx => board[idx] === \"X\")) {\n        setWinner(\"X\");\n        setPlayerXScore(prevState => prevState + 1);\n      }\n      if (w.every(idx => board[idx] === \"O\")) {\n        setWinner(\"O\");\n        setPlayerOScore(prevState => prevState + 1);\n      }\n      return board;\n    });\n  }, [board]);\n\n  const boardIsFull = board.every(cell => cell.length === 1);\n\n  useEffect(() => {\n    if (boardIsFull) setWinnerMessage(`TIE!!`);\n  }, [boardIsFull]);\n\n  // SET WINNING MESSAGE\n  useEffect(() => {\n    if (winner.length > 0) setWinnerMessage(`PLAYER ${winner} WINS!!`);\n  }, [winner])\n\n  const handleResetClick = () => {\n    setWinner('');\n    setWinnerMessage('');\n    setCurrentPlayer(!currentPlayer);\n    setBoard(new Array(9).fill(''));\n  }\n\n  const handleClick = (idx) => {\n    if (board[idx] === '') {\n      board[idx] = currentPlayer ? \"X\" : \"O\"\n      setBoard([\n        ...board,\n      ]);\n      setCurrentPlayer(!currentPlayer);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      {winnerMessage && (\n        <WinnerAlert\n          winner={winnerMessage}\n          handleResetClick={handleResetClick}\n        />\n      )}\n      <div className=\"game_container\">\n        <Scoreboard xWins={playerXScore} yWins={playerOScore} />\n        <Board board={board} handleClick={handleClick} />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}